// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: zerotouch/golang/proto/blood_bank_system_service.proto

package BloodBankSystemService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BloodBankSystemServiceClient is the client API for BloodBankSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloodBankSystemServiceClient interface {
	ExecuteFindPassword(ctx context.Context, in *FindPasswordRequest, opts ...grpc.CallOption) (*FindPasswordResponse, error)
	ExecuteAddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	ExecuteAddUserBulk(ctx context.Context, in *BulkAddUserRequest, opts ...grpc.CallOption) (*BulkAddUserResponse, error)
	ExecuteFindBlood(ctx context.Context, in *FindBloodRequest, opts ...grpc.CallOption) (*FindBloodResponse, error)
	ExecuteAddBlood(ctx context.Context, in *AddBloodRequest, opts ...grpc.CallOption) (*AddBloodResponse, error)
	ExecuteAddBloodBulk(ctx context.Context, in *BulkAddBloodRequest, opts ...grpc.CallOption) (*BulkAddBloodResponse, error)
	Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error)
}

type bloodBankSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloodBankSystemServiceClient(cc grpc.ClientConnInterface) BloodBankSystemServiceClient {
	return &bloodBankSystemServiceClient{cc}
}

func (c *bloodBankSystemServiceClient) ExecuteFindPassword(ctx context.Context, in *FindPasswordRequest, opts ...grpc.CallOption) (*FindPasswordResponse, error) {
	out := new(FindPasswordResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteFindPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) ExecuteAddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) ExecuteAddUserBulk(ctx context.Context, in *BulkAddUserRequest, opts ...grpc.CallOption) (*BulkAddUserResponse, error) {
	out := new(BulkAddUserResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddUserBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) ExecuteFindBlood(ctx context.Context, in *FindBloodRequest, opts ...grpc.CallOption) (*FindBloodResponse, error) {
	out := new(FindBloodResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteFindBlood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) ExecuteAddBlood(ctx context.Context, in *AddBloodRequest, opts ...grpc.CallOption) (*AddBloodResponse, error) {
	out := new(AddBloodResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddBlood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) ExecuteAddBloodBulk(ctx context.Context, in *BulkAddBloodRequest, opts ...grpc.CallOption) (*BulkAddBloodResponse, error) {
	out := new(BulkAddBloodResponse)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddBloodBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodBankSystemServiceClient) Execute(ctx context.Context, in *MultiRequests, opts ...grpc.CallOption) (*MultiResponses, error) {
	out := new(MultiResponses)
	err := c.cc.Invoke(ctx, "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloodBankSystemServiceServer is the server API for BloodBankSystemService service.
// All implementations must embed UnimplementedBloodBankSystemServiceServer
// for forward compatibility
type BloodBankSystemServiceServer interface {
	ExecuteFindPassword(context.Context, *FindPasswordRequest) (*FindPasswordResponse, error)
	ExecuteAddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	ExecuteAddUserBulk(context.Context, *BulkAddUserRequest) (*BulkAddUserResponse, error)
	ExecuteFindBlood(context.Context, *FindBloodRequest) (*FindBloodResponse, error)
	ExecuteAddBlood(context.Context, *AddBloodRequest) (*AddBloodResponse, error)
	ExecuteAddBloodBulk(context.Context, *BulkAddBloodRequest) (*BulkAddBloodResponse, error)
	Execute(context.Context, *MultiRequests) (*MultiResponses, error)
	mustEmbedUnimplementedBloodBankSystemServiceServer()
}

// UnimplementedBloodBankSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBloodBankSystemServiceServer struct {
}

func (UnimplementedBloodBankSystemServiceServer) ExecuteFindPassword(context.Context, *FindPasswordRequest) (*FindPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindPassword not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) ExecuteAddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddUser not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) ExecuteAddUserBulk(context.Context, *BulkAddUserRequest) (*BulkAddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddUserBulk not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) ExecuteFindBlood(context.Context, *FindBloodRequest) (*FindBloodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFindBlood not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) ExecuteAddBlood(context.Context, *AddBloodRequest) (*AddBloodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddBlood not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) ExecuteAddBloodBulk(context.Context, *BulkAddBloodRequest) (*BulkAddBloodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddBloodBulk not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) Execute(context.Context, *MultiRequests) (*MultiResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedBloodBankSystemServiceServer) mustEmbedUnimplementedBloodBankSystemServiceServer() {
}

// UnsafeBloodBankSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloodBankSystemServiceServer will
// result in compilation errors.
type UnsafeBloodBankSystemServiceServer interface {
	mustEmbedUnimplementedBloodBankSystemServiceServer()
}

func RegisterBloodBankSystemServiceServer(s grpc.ServiceRegistrar, srv BloodBankSystemServiceServer) {
	s.RegisterService(&BloodBankSystemService_ServiceDesc, srv)
}

func _BloodBankSystemService_ExecuteFindPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteFindPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteFindPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteFindPassword(ctx, req.(*FindPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_ExecuteAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteAddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_ExecuteAddUserBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteAddUserBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddUserBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteAddUserBulk(ctx, req.(*BulkAddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_ExecuteFindBlood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBloodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteFindBlood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteFindBlood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteFindBlood(ctx, req.(*FindBloodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_ExecuteAddBlood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBloodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteAddBlood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddBlood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteAddBlood(ctx, req.(*AddBloodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_ExecuteAddBloodBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddBloodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).ExecuteAddBloodBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/ExecuteAddBloodBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).ExecuteAddBloodBulk(ctx, req.(*BulkAddBloodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodBankSystemService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodBankSystemServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodBankSystemServiceServer).Execute(ctx, req.(*MultiRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// BloodBankSystemService_ServiceDesc is the grpc.ServiceDesc for BloodBankSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloodBankSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService",
	HandlerType: (*BloodBankSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFindPassword",
			Handler:    _BloodBankSystemService_ExecuteFindPassword_Handler,
		},
		{
			MethodName: "ExecuteAddUser",
			Handler:    _BloodBankSystemService_ExecuteAddUser_Handler,
		},
		{
			MethodName: "ExecuteAddUserBulk",
			Handler:    _BloodBankSystemService_ExecuteAddUserBulk_Handler,
		},
		{
			MethodName: "ExecuteFindBlood",
			Handler:    _BloodBankSystemService_ExecuteFindBlood_Handler,
		},
		{
			MethodName: "ExecuteAddBlood",
			Handler:    _BloodBankSystemService_ExecuteAddBlood_Handler,
		},
		{
			MethodName: "ExecuteAddBloodBulk",
			Handler:    _BloodBankSystemService_ExecuteAddBloodBulk_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _BloodBankSystemService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zerotouch/golang/proto/blood_bank_system_service.proto",
}
