// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: zerotouch/golang/proto/blood_bank_system_service.proto

package BloodBankSystemService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	StatusCode_SUCCESS               StatusCode = 0
	StatusCode_NOT_FOUND             StatusCode = 1
	StatusCode_ZERO_RESULTS          StatusCode = 2
	StatusCode_DUPLICATE             StatusCode = 3
	StatusCode_LIMIT_EXCEEDED        StatusCode = 4
	StatusCode_INVALID_REQUEST       StatusCode = 5
	StatusCode_TEMPORARILY_SUSPENDED StatusCode = 6
	StatusCode_OVER_USAGE_LIMIT      StatusCode = 7
	StatusCode_REQUEST_DENIED        StatusCode = 8
	StatusCode_UNKNOWN_ERROR         StatusCode = 9
	StatusCode_DB_FAILURE            StatusCode = 10
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "NOT_FOUND",
		2:  "ZERO_RESULTS",
		3:  "DUPLICATE",
		4:  "LIMIT_EXCEEDED",
		5:  "INVALID_REQUEST",
		6:  "TEMPORARILY_SUSPENDED",
		7:  "OVER_USAGE_LIMIT",
		8:  "REQUEST_DENIED",
		9:  "UNKNOWN_ERROR",
		10: "DB_FAILURE",
	}
	StatusCode_value = map[string]int32{
		"SUCCESS":               0,
		"NOT_FOUND":             1,
		"ZERO_RESULTS":          2,
		"DUPLICATE":             3,
		"LIMIT_EXCEEDED":        4,
		"INVALID_REQUEST":       5,
		"TEMPORARILY_SUSPENDED": 6,
		"OVER_USAGE_LIMIT":      7,
		"REQUEST_DENIED":        8,
		"UNKNOWN_ERROR":         9,
		"DB_FAILURE":            10,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{0}
}

type RequestHeaders_LANGUAGE int32

const (
	RequestHeaders_English RequestHeaders_LANGUAGE = 0
	RequestHeaders_Hindi   RequestHeaders_LANGUAGE = 2
)

// Enum value maps for RequestHeaders_LANGUAGE.
var (
	RequestHeaders_LANGUAGE_name = map[int32]string{
		0: "English",
		2: "Hindi",
	}
	RequestHeaders_LANGUAGE_value = map[string]int32{
		"English": 0,
		"Hindi":   2,
	}
)

func (x RequestHeaders_LANGUAGE) Enum() *RequestHeaders_LANGUAGE {
	p := new(RequestHeaders_LANGUAGE)
	*p = x
	return p
}

func (x RequestHeaders_LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestHeaders_LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[1].Descriptor()
}

func (RequestHeaders_LANGUAGE) Type() protoreflect.EnumType {
	return &file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[1]
}

func (x RequestHeaders_LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestHeaders_LANGUAGE.Descriptor instead.
func (RequestHeaders_LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{0, 0}
}

type RequestHeaders_COUNTRY int32

const (
	RequestHeaders_India     RequestHeaders_COUNTRY = 0
	RequestHeaders_Australia RequestHeaders_COUNTRY = 2
)

// Enum value maps for RequestHeaders_COUNTRY.
var (
	RequestHeaders_COUNTRY_name = map[int32]string{
		0: "India",
		2: "Australia",
	}
	RequestHeaders_COUNTRY_value = map[string]int32{
		"India":     0,
		"Australia": 2,
	}
)

func (x RequestHeaders_COUNTRY) Enum() *RequestHeaders_COUNTRY {
	p := new(RequestHeaders_COUNTRY)
	*p = x
	return p
}

func (x RequestHeaders_COUNTRY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestHeaders_COUNTRY) Descriptor() protoreflect.EnumDescriptor {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[2].Descriptor()
}

func (RequestHeaders_COUNTRY) Type() protoreflect.EnumType {
	return &file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes[2]
}

func (x RequestHeaders_COUNTRY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestHeaders_COUNTRY.Descriptor instead.
func (RequestHeaders_COUNTRY) EnumDescriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{0, 1}
}

type RequestHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefferedUserName string                  `protobuf:"bytes,1,opt,name=prefferedUserName,proto3" json:"prefferedUserName,omitempty"`
	ClientId          string                  `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	TracingId         string                  `protobuf:"bytes,3,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	TraceDetails      bool                    `protobuf:"varint,4,opt,name=traceDetails,proto3" json:"traceDetails,omitempty"`
	Language          RequestHeaders_LANGUAGE `protobuf:"varint,5,opt,name=language,proto3,enum=farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders_LANGUAGE" json:"language,omitempty"`
	Latitude          float32                 `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude         float32                 `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Accuracy          float32                 `protobuf:"fixed32,8,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Country           RequestHeaders_COUNTRY  `protobuf:"varint,9,opt,name=country,proto3,enum=farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders_COUNTRY" json:"country,omitempty"`
	ExperimentId      string                  `protobuf:"bytes,10,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	Attribs           []*Attribs              `protobuf:"bytes,11,rep,name=attribs,proto3" json:"attribs,omitempty"`
	AuthToken         string                  `protobuf:"bytes,12,opt,name=authToken,proto3" json:"authToken,omitempty"`
	AppToken          string                  `protobuf:"bytes,13,opt,name=appToken,proto3" json:"appToken,omitempty"`
}

func (x *RequestHeaders) Reset() {
	*x = RequestHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeaders) ProtoMessage() {}

func (x *RequestHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeaders.ProtoReflect.Descriptor instead.
func (*RequestHeaders) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHeaders) GetPrefferedUserName() string {
	if x != nil {
		return x.PrefferedUserName
	}
	return ""
}

func (x *RequestHeaders) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RequestHeaders) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *RequestHeaders) GetTraceDetails() bool {
	if x != nil {
		return x.TraceDetails
	}
	return false
}

func (x *RequestHeaders) GetLanguage() RequestHeaders_LANGUAGE {
	if x != nil {
		return x.Language
	}
	return RequestHeaders_English
}

func (x *RequestHeaders) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RequestHeaders) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RequestHeaders) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *RequestHeaders) GetCountry() RequestHeaders_COUNTRY {
	if x != nil {
		return x.Country
	}
	return RequestHeaders_India
}

func (x *RequestHeaders) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *RequestHeaders) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *RequestHeaders) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestHeaders) GetAppToken() string {
	if x != nil {
		return x.AppToken
	}
	return ""
}

type Attribs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribs) Reset() {
	*x = Attribs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribs) ProtoMessage() {}

func (x *Attribs) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribs.ProtoReflect.Descriptor instead.
func (*Attribs) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{1}
}

func (x *Attribs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Attribs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=farm.nurture.core.contracts.BloodBankSystemService.StatusCode" json:"status,omitempty"`
	ErrorMessages     []string   `protobuf:"bytes,2,rep,name=error_messages,json=errorMessages,proto3" json:"error_messages,omitempty"`
	InternalErrorCode int32      `protobuf:"varint,3,opt,name=internal_error_code,json=internalErrorCode,proto3" json:"internal_error_code,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_SUCCESS
}

func (x *Status) GetErrorMessages() []string {
	if x != nil {
		return x.ErrorMessages
	}
	return nil
}

func (x *Status) GetInternalErrorCode() int32 {
	if x != nil {
		return x.InternalErrorCode
	}
	return 0
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//FindPassword
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
type FindPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	Id             string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindPasswordRequest) Reset() {
	*x = FindPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPasswordRequest) ProtoMessage() {}

func (x *FindPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPasswordRequest.ProtoReflect.Descriptor instead.
func (*FindPasswordRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{3}
}

func (x *FindPasswordRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindPasswordRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindPasswordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindPasswordResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FindPasswordResponseRecord) Reset() {
	*x = FindPasswordResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPasswordResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPasswordResponseRecord) ProtoMessage() {}

func (x *FindPasswordResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPasswordResponseRecord.ProtoReflect.Descriptor instead.
func (*FindPasswordResponseRecord) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{4}
}

func (x *FindPasswordResponseRecord) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FindPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                    `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindPasswordResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindPasswordResponse) Reset() {
	*x = FindPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPasswordResponse) ProtoMessage() {}

func (x *FindPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPasswordResponse.ProtoReflect.Descriptor instead.
func (*FindPasswordResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{5}
}

func (x *FindPasswordResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindPasswordResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindPasswordResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindPasswordResponse) GetRecords() []*FindPasswordResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//AddUser
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Id             string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Password       string          `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddUserRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type BulkAddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders   `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddUserRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddUserRequest) Reset() {
	*x = BulkAddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddUserRequest) ProtoMessage() {}

func (x *BulkAddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddUserRequest.ProtoReflect.Descriptor instead.
func (*BulkAddUserRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{7}
}

func (x *BulkAddUserRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddUserRequest) GetRequests() []*AddUserRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddUserResponse) Reset() {
	*x = AddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResponse) ProtoMessage() {}

func (x *AddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResponse.ProtoReflect.Descriptor instead.
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddUserResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddUserResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddUserResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddUserResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddUserResponse) Reset() {
	*x = BulkAddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddUserResponse) ProtoMessage() {}

func (x *BulkAddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddUserResponse.ProtoReflect.Descriptor instead.
func (*BulkAddUserResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{9}
}

func (x *BulkAddUserResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddUserResponse) GetResponses() []*AddUserResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//FindBlood
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
type FindBloodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	IsStaleAllowed bool            `protobuf:"varint,2,opt,name=isStaleAllowed,proto3" json:"isStaleAllowed,omitempty"`
	BloodType      string          `protobuf:"bytes,3,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Location       string          `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *FindBloodRequest) Reset() {
	*x = FindBloodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBloodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBloodRequest) ProtoMessage() {}

func (x *FindBloodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBloodRequest.ProtoReflect.Descriptor instead.
func (*FindBloodRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{10}
}

func (x *FindBloodRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *FindBloodRequest) GetIsStaleAllowed() bool {
	if x != nil {
		return x.IsStaleAllowed
	}
	return false
}

func (x *FindBloodRequest) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *FindBloodRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type FindBloodResponseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location    string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	BloodType   string `protobuf:"bytes,3,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Gender      string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber string `protobuf:"bytes,5,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (x *FindBloodResponseRecord) Reset() {
	*x = FindBloodResponseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBloodResponseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBloodResponseRecord) ProtoMessage() {}

func (x *FindBloodResponseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBloodResponseRecord.ProtoReflect.Descriptor instead.
func (*FindBloodResponseRecord) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{11}
}

func (x *FindBloodResponseRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindBloodResponseRecord) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FindBloodResponseRecord) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *FindBloodResponseRecord) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *FindBloodResponseRecord) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type FindBloodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count   int32                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Attribs []*Attribs                 `protobuf:"bytes,3,rep,name=attribs,proto3" json:"attribs,omitempty"`
	Records []*FindBloodResponseRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *FindBloodResponse) Reset() {
	*x = FindBloodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBloodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBloodResponse) ProtoMessage() {}

func (x *FindBloodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBloodResponse.ProtoReflect.Descriptor instead.
func (*FindBloodResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{12}
}

func (x *FindBloodResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindBloodResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindBloodResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *FindBloodResponse) GetRecords() []*FindBloodResponseRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//AddBlood
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
type AddBloodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location       string          `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	BloodType      string          `protobuf:"bytes,4,opt,name=bloodType,proto3" json:"bloodType,omitempty"`
	Gender         string          `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber    string          `protobuf:"bytes,6,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (x *AddBloodRequest) Reset() {
	*x = AddBloodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBloodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBloodRequest) ProtoMessage() {}

func (x *AddBloodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBloodRequest.ProtoReflect.Descriptor instead.
func (*AddBloodRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddBloodRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *AddBloodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBloodRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddBloodRequest) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *AddBloodRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *AddBloodRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type BulkAddBloodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHeaders *RequestHeaders    `protobuf:"bytes,1,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Requests       []*AddBloodRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAddBloodRequest) Reset() {
	*x = BulkAddBloodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddBloodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddBloodRequest) ProtoMessage() {}

func (x *BulkAddBloodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddBloodRequest.ProtoReflect.Descriptor instead.
func (*BulkAddBloodRequest) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{14}
}

func (x *BulkAddBloodRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *BulkAddBloodRequest) GetRequests() []*AddBloodRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AddBloodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RecordId string     `protobuf:"bytes,3,opt,name=recordId,proto3" json:"recordId,omitempty"`
	Attribs  []*Attribs `protobuf:"bytes,4,rep,name=attribs,proto3" json:"attribs,omitempty"`
}

func (x *AddBloodResponse) Reset() {
	*x = AddBloodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBloodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBloodResponse) ProtoMessage() {}

func (x *AddBloodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBloodResponse.ProtoReflect.Descriptor instead.
func (*AddBloodResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddBloodResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddBloodResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddBloodResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AddBloodResponse) GetAttribs() []*Attribs {
	if x != nil {
		return x.Attribs
	}
	return nil
}

type BulkAddBloodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count     int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Responses []*AddBloodResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkAddBloodResponse) Reset() {
	*x = BulkAddBloodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAddBloodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAddBloodResponse) ProtoMessage() {}

func (x *BulkAddBloodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAddBloodResponse.ProtoReflect.Descriptor instead.
func (*BulkAddBloodResponse) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{16}
}

func (x *BulkAddBloodResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkAddBloodResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BulkAddBloodResponse) GetResponses() []*AddBloodResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Multi Queries
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
type MultiRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnTxn   bool       `protobuf:"varint,1,opt,name=onTxn,proto3" json:"onTxn,omitempty"`
	Request []*Request `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *MultiRequests) Reset() {
	*x = MultiRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRequests) ProtoMessage() {}

func (x *MultiRequests) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRequests.ProtoReflect.Descriptor instead.
func (*MultiRequests) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{17}
}

func (x *MultiRequests) GetOnTxn() bool {
	if x != nil {
		return x.OnTxn
	}
	return false
}

func (x *MultiRequests) GetRequest() []*Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to ARequest:
	//	*Request_ReqFindPassword
	//	*Request_ReqAddUser
	//	*Request_ReqAddUserBulk
	//	*Request_ReqFindBlood
	//	*Request_ReqAddBlood
	//	*Request_ReqAddBloodBulk
	ARequest isRequest_ARequest `protobuf_oneof:"ARequest"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{18}
}

func (x *Request) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (m *Request) GetARequest() isRequest_ARequest {
	if m != nil {
		return m.ARequest
	}
	return nil
}

func (x *Request) GetReqFindPassword() *FindPasswordRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindPassword); ok {
		return x.ReqFindPassword
	}
	return nil
}

func (x *Request) GetReqAddUser() *AddUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddUser); ok {
		return x.ReqAddUser
	}
	return nil
}

func (x *Request) GetReqAddUserBulk() *BulkAddUserRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddUserBulk); ok {
		return x.ReqAddUserBulk
	}
	return nil
}

func (x *Request) GetReqFindBlood() *FindBloodRequest {
	if x, ok := x.GetARequest().(*Request_ReqFindBlood); ok {
		return x.ReqFindBlood
	}
	return nil
}

func (x *Request) GetReqAddBlood() *AddBloodRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddBlood); ok {
		return x.ReqAddBlood
	}
	return nil
}

func (x *Request) GetReqAddBloodBulk() *BulkAddBloodRequest {
	if x, ok := x.GetARequest().(*Request_ReqAddBloodBulk); ok {
		return x.ReqAddBloodBulk
	}
	return nil
}

type isRequest_ARequest interface {
	isRequest_ARequest()
}

type Request_ReqFindPassword struct {
	ReqFindPassword *FindPasswordRequest `protobuf:"bytes,2,opt,name=reqFindPassword,proto3,oneof"`
}

type Request_ReqAddUser struct {
	ReqAddUser *AddUserRequest `protobuf:"bytes,3,opt,name=reqAddUser,proto3,oneof"`
}

type Request_ReqAddUserBulk struct {
	ReqAddUserBulk *BulkAddUserRequest `protobuf:"bytes,4,opt,name=reqAddUserBulk,proto3,oneof"`
}

type Request_ReqFindBlood struct {
	ReqFindBlood *FindBloodRequest `protobuf:"bytes,5,opt,name=reqFindBlood,proto3,oneof"`
}

type Request_ReqAddBlood struct {
	ReqAddBlood *AddBloodRequest `protobuf:"bytes,6,opt,name=reqAddBlood,proto3,oneof"`
}

type Request_ReqAddBloodBulk struct {
	ReqAddBloodBulk *BulkAddBloodRequest `protobuf:"bytes,7,opt,name=reqAddBloodBulk,proto3,oneof"`
}

func (*Request_ReqFindPassword) isRequest_ARequest() {}

func (*Request_ReqAddUser) isRequest_ARequest() {}

func (*Request_ReqAddUserBulk) isRequest_ARequest() {}

func (*Request_ReqFindBlood) isRequest_ARequest() {}

func (*Request_ReqAddBlood) isRequest_ARequest() {}

func (*Request_ReqAddBloodBulk) isRequest_ARequest() {}

type MultiResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Response []*Response `protobuf:"bytes,2,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiResponses) Reset() {
	*x = MultiResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiResponses) ProtoMessage() {}

func (x *MultiResponses) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiResponses.ProtoReflect.Descriptor instead.
func (*MultiResponses) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{19}
}

func (x *MultiResponses) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiResponses) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  string  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to AResponse:
	//	*Response_ResFindPassword
	//	*Response_ResAddUser
	//	*Response_ResAddUserBulk
	//	*Response_ResFindBlood
	//	*Response_ResAddBlood
	//	*Response_ResAddBloodBulk
	AResponse isResponse_AResponse `protobuf_oneof:"AResponse"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP(), []int{20}
}

func (x *Response) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Response) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Response) GetAResponse() isResponse_AResponse {
	if m != nil {
		return m.AResponse
	}
	return nil
}

func (x *Response) GetResFindPassword() *FindPasswordResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindPassword); ok {
		return x.ResFindPassword
	}
	return nil
}

func (x *Response) GetResAddUser() *AddUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddUser); ok {
		return x.ResAddUser
	}
	return nil
}

func (x *Response) GetResAddUserBulk() *BulkAddUserResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddUserBulk); ok {
		return x.ResAddUserBulk
	}
	return nil
}

func (x *Response) GetResFindBlood() *FindBloodResponse {
	if x, ok := x.GetAResponse().(*Response_ResFindBlood); ok {
		return x.ResFindBlood
	}
	return nil
}

func (x *Response) GetResAddBlood() *AddBloodResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddBlood); ok {
		return x.ResAddBlood
	}
	return nil
}

func (x *Response) GetResAddBloodBulk() *BulkAddBloodResponse {
	if x, ok := x.GetAResponse().(*Response_ResAddBloodBulk); ok {
		return x.ResAddBloodBulk
	}
	return nil
}

type isResponse_AResponse interface {
	isResponse_AResponse()
}

type Response_ResFindPassword struct {
	ResFindPassword *FindPasswordResponse `protobuf:"bytes,3,opt,name=resFindPassword,proto3,oneof"`
}

type Response_ResAddUser struct {
	ResAddUser *AddUserResponse `protobuf:"bytes,4,opt,name=resAddUser,proto3,oneof"`
}

type Response_ResAddUserBulk struct {
	ResAddUserBulk *BulkAddUserResponse `protobuf:"bytes,5,opt,name=resAddUserBulk,proto3,oneof"`
}

type Response_ResFindBlood struct {
	ResFindBlood *FindBloodResponse `protobuf:"bytes,6,opt,name=resFindBlood,proto3,oneof"`
}

type Response_ResAddBlood struct {
	ResAddBlood *AddBloodResponse `protobuf:"bytes,7,opt,name=resAddBlood,proto3,oneof"`
}

type Response_ResAddBloodBulk struct {
	ResAddBloodBulk *BulkAddBloodResponse `protobuf:"bytes,8,opt,name=resAddBloodBulk,proto3,oneof"`
}

func (*Response_ResFindPassword) isResponse_AResponse() {}

func (*Response_ResAddUser) isResponse_AResponse() {}

func (*Response_ResAddUserBulk) isResponse_AResponse() {}

func (*Response_ResFindBlood) isResponse_AResponse() {}

func (*Response_ResAddBlood) isResponse_AResponse() {}

func (*Response_ResAddBloodBulk) isResponse_AResponse() {}

var File_zerotouch_golang_proto_blood_bank_system_service_proto protoreflect.FileDescriptor

var file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDesc = []byte{
	0x0a, 0x36, 0x7a, 0x65, 0x72, 0x6f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xbf, 0x05, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x22, 0x0a, 0x08, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x69, 0x6e, 0x64, 0x69, 0x10, 0x02, 0x22, 0x23, 0x0a, 0x07, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61, 0x10, 0x02, 0x22, 0x31,
	0x0a, 0x07, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13,
	0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xc1, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x68, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xe0, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xbb, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x65, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x85,
	0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x73, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x22, 0xe4, 0x01,
	0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x62, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x6e, 0x54, 0x78, 0x6e, 0x12, 0x55, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc2, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x73, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x70, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x6a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x67, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x41, 0x64,
	0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x73, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x41,
	0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x74, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x12,
	0x6b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x68, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x74, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x41, 0x64, 0x64,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x0b, 0x0a, 0x09,
	0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xda, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x42, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x32, 0x94, 0x09, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d,
	0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b,
	0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a,
	0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x46, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x44, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x43,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x13,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42,
	0x75, 0x6c, 0x6b, 0x12, 0x47, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x42, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e,
	0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x42, 0x52, 0x0a,
	0x1f, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6e, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2d, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescOnce sync.Once
	file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescData = file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDesc
)

func file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescGZIP() []byte {
	file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescOnce.Do(func() {
		file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescData)
	})
	return file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDescData
}

var file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_zerotouch_golang_proto_blood_bank_system_service_proto_goTypes = []interface{}{
	(StatusCode)(0),                    // 0: farm.nurture.core.contracts.BloodBankSystemService.StatusCode
	(RequestHeaders_LANGUAGE)(0),       // 1: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.LANGUAGE
	(RequestHeaders_COUNTRY)(0),        // 2: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.COUNTRY
	(*RequestHeaders)(nil),             // 3: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	(*Attribs)(nil),                    // 4: farm.nurture.core.contracts.BloodBankSystemService.Attribs
	(*Status)(nil),                     // 5: farm.nurture.core.contracts.BloodBankSystemService.Status
	(*FindPasswordRequest)(nil),        // 6: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordRequest
	(*FindPasswordResponseRecord)(nil), // 7: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponseRecord
	(*FindPasswordResponse)(nil),       // 8: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse
	(*AddUserRequest)(nil),             // 9: farm.nurture.core.contracts.BloodBankSystemService.AddUserRequest
	(*BulkAddUserRequest)(nil),         // 10: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserRequest
	(*AddUserResponse)(nil),            // 11: farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse
	(*BulkAddUserResponse)(nil),        // 12: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserResponse
	(*FindBloodRequest)(nil),           // 13: farm.nurture.core.contracts.BloodBankSystemService.FindBloodRequest
	(*FindBloodResponseRecord)(nil),    // 14: farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponseRecord
	(*FindBloodResponse)(nil),          // 15: farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse
	(*AddBloodRequest)(nil),            // 16: farm.nurture.core.contracts.BloodBankSystemService.AddBloodRequest
	(*BulkAddBloodRequest)(nil),        // 17: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodRequest
	(*AddBloodResponse)(nil),           // 18: farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse
	(*BulkAddBloodResponse)(nil),       // 19: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodResponse
	(*MultiRequests)(nil),              // 20: farm.nurture.core.contracts.BloodBankSystemService.MultiRequests
	(*Request)(nil),                    // 21: farm.nurture.core.contracts.BloodBankSystemService.Request
	(*MultiResponses)(nil),             // 22: farm.nurture.core.contracts.BloodBankSystemService.MultiResponses
	(*Response)(nil),                   // 23: farm.nurture.core.contracts.BloodBankSystemService.Response
}
var file_zerotouch_golang_proto_blood_bank_system_service_proto_depIdxs = []int32{
	1,  // 0: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.language:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.LANGUAGE
	2,  // 1: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.country:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.COUNTRY
	4,  // 2: farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders.attribs:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Attribs
	0,  // 3: farm.nurture.core.contracts.BloodBankSystemService.Status.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.StatusCode
	3,  // 4: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	5,  // 5: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	4,  // 6: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse.attribs:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Attribs
	7,  // 7: farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse.records:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponseRecord
	3,  // 8: farm.nurture.core.contracts.BloodBankSystemService.AddUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	3,  // 9: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	9,  // 10: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserRequest.requests:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddUserRequest
	5,  // 11: farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	4,  // 12: farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse.attribs:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Attribs
	5,  // 13: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	11, // 14: farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserResponse.responses:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse
	3,  // 15: farm.nurture.core.contracts.BloodBankSystemService.FindBloodRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	5,  // 16: farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	4,  // 17: farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse.attribs:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Attribs
	14, // 18: farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse.records:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponseRecord
	3,  // 19: farm.nurture.core.contracts.BloodBankSystemService.AddBloodRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	3,  // 20: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodRequest.requestHeaders:type_name -> farm.nurture.core.contracts.BloodBankSystemService.RequestHeaders
	16, // 21: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodRequest.requests:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodRequest
	5,  // 22: farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	4,  // 23: farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse.attribs:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Attribs
	5,  // 24: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodResponse.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	18, // 25: farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodResponse.responses:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse
	21, // 26: farm.nurture.core.contracts.BloodBankSystemService.MultiRequests.request:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Request
	6,  // 27: farm.nurture.core.contracts.BloodBankSystemService.Request.reqFindPassword:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindPasswordRequest
	9,  // 28: farm.nurture.core.contracts.BloodBankSystemService.Request.reqAddUser:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddUserRequest
	10, // 29: farm.nurture.core.contracts.BloodBankSystemService.Request.reqAddUserBulk:type_name -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserRequest
	13, // 30: farm.nurture.core.contracts.BloodBankSystemService.Request.reqFindBlood:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindBloodRequest
	16, // 31: farm.nurture.core.contracts.BloodBankSystemService.Request.reqAddBlood:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodRequest
	17, // 32: farm.nurture.core.contracts.BloodBankSystemService.Request.reqAddBloodBulk:type_name -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodRequest
	5,  // 33: farm.nurture.core.contracts.BloodBankSystemService.MultiResponses.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	23, // 34: farm.nurture.core.contracts.BloodBankSystemService.MultiResponses.response:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Response
	5,  // 35: farm.nurture.core.contracts.BloodBankSystemService.Response.status:type_name -> farm.nurture.core.contracts.BloodBankSystemService.Status
	8,  // 36: farm.nurture.core.contracts.BloodBankSystemService.Response.resFindPassword:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse
	11, // 37: farm.nurture.core.contracts.BloodBankSystemService.Response.resAddUser:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse
	12, // 38: farm.nurture.core.contracts.BloodBankSystemService.Response.resAddUserBulk:type_name -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserResponse
	15, // 39: farm.nurture.core.contracts.BloodBankSystemService.Response.resFindBlood:type_name -> farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse
	18, // 40: farm.nurture.core.contracts.BloodBankSystemService.Response.resAddBlood:type_name -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse
	19, // 41: farm.nurture.core.contracts.BloodBankSystemService.Response.resAddBloodBulk:type_name -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodResponse
	6,  // 42: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteFindPassword:input_type -> farm.nurture.core.contracts.BloodBankSystemService.FindPasswordRequest
	9,  // 43: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddUser:input_type -> farm.nurture.core.contracts.BloodBankSystemService.AddUserRequest
	10, // 44: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddUserBulk:input_type -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserRequest
	13, // 45: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteFindBlood:input_type -> farm.nurture.core.contracts.BloodBankSystemService.FindBloodRequest
	16, // 46: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddBlood:input_type -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodRequest
	17, // 47: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddBloodBulk:input_type -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodRequest
	20, // 48: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.Execute:input_type -> farm.nurture.core.contracts.BloodBankSystemService.MultiRequests
	8,  // 49: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteFindPassword:output_type -> farm.nurture.core.contracts.BloodBankSystemService.FindPasswordResponse
	11, // 50: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddUser:output_type -> farm.nurture.core.contracts.BloodBankSystemService.AddUserResponse
	12, // 51: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddUserBulk:output_type -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddUserResponse
	15, // 52: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteFindBlood:output_type -> farm.nurture.core.contracts.BloodBankSystemService.FindBloodResponse
	18, // 53: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddBlood:output_type -> farm.nurture.core.contracts.BloodBankSystemService.AddBloodResponse
	19, // 54: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.ExecuteAddBloodBulk:output_type -> farm.nurture.core.contracts.BloodBankSystemService.BulkAddBloodResponse
	22, // 55: farm.nurture.core.contracts.BloodBankSystemService.BloodBankSystemService.Execute:output_type -> farm.nurture.core.contracts.BloodBankSystemService.MultiResponses
	49, // [49:56] is the sub-list for method output_type
	42, // [42:49] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_zerotouch_golang_proto_blood_bank_system_service_proto_init() }
func file_zerotouch_golang_proto_blood_bank_system_service_proto_init() {
	if File_zerotouch_golang_proto_blood_bank_system_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPasswordResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBloodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBloodResponseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBloodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBloodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddBloodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBloodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAddBloodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Request_ReqFindPassword)(nil),
		(*Request_ReqAddUser)(nil),
		(*Request_ReqAddUserBulk)(nil),
		(*Request_ReqFindBlood)(nil),
		(*Request_ReqAddBlood)(nil),
		(*Request_ReqAddBloodBulk)(nil),
	}
	file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Response_ResFindPassword)(nil),
		(*Response_ResAddUser)(nil),
		(*Response_ResAddUserBulk)(nil),
		(*Response_ResFindBlood)(nil),
		(*Response_ResAddBlood)(nil),
		(*Response_ResAddBloodBulk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zerotouch_golang_proto_blood_bank_system_service_proto_goTypes,
		DependencyIndexes: file_zerotouch_golang_proto_blood_bank_system_service_proto_depIdxs,
		EnumInfos:         file_zerotouch_golang_proto_blood_bank_system_service_proto_enumTypes,
		MessageInfos:      file_zerotouch_golang_proto_blood_bank_system_service_proto_msgTypes,
	}.Build()
	File_zerotouch_golang_proto_blood_bank_system_service_proto = out.File
	file_zerotouch_golang_proto_blood_bank_system_service_proto_rawDesc = nil
	file_zerotouch_golang_proto_blood_bank_system_service_proto_goTypes = nil
	file_zerotouch_golang_proto_blood_bank_system_service_proto_depIdxs = nil
}
